from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
import os
from dotenv import load_dotenv
from keyboards import KeyboardManager
from states import LOGIN, PASSWORD
import re

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

user_data = {}

async def start(update, context):
    reply_markup = KeyboardManager.get_register_button()  # üëà –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑ –∫–ª–∞—Å—Å–∞
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ WB_Congratulations_bot\n\n"
        "–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º –¥–ª—è –≤–∞—Å:\n\n"
        "–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º, –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, "
        "–∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É –∏ –≤—ã–¥–∞–Ω–Ω—ã–π –≤–∞–º –ø–∞—Ä–æ–ª—å. "
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'",
        reply_markup=reply_markup
    )
    return None

async def register_start(update, context):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞):",
        reply_markup=KeyboardManager.remove_keyboard()  # ‚Üê —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    )
    return LOGIN

CORPORATE_DOMAIN = "st.ithub.ru"  # ‚Üê –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω

async def get_login(update, context):
    user_login = update.message.text.strip()

    if not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", user_login):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: ivanov@st.ithub.ru"
        )
        return LOGIN

    if not user_login.endswith(f"@{CORPORATE_DOMAIN}"):
        await update.message.reply_text(
            f"–ü–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π (@{CORPORATE_DOMAIN}).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return LOGIN

    context.user_data['login'] = user_login
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def get_password(update, context):
    user_password = update.message.text.strip()
    context.user_data['password'] = user_password
    await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!")

    context.user_data.clear()

    return ConversationHandler.END

async def cancel(update, context):
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text([KeyboardManager.REGISTER]), register_start)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_login)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()