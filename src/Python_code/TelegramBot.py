from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
import os
from dotenv import load_dotenv
from keyboards import KeyboardManager
from states import LOGIN, PASSWORD
import re
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from database import get_all_employees
load_dotenv()


TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

user_data = {}

async def start(update, context):
    reply_markup = KeyboardManager.get_register_button()  # üëà –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑ –∫–ª–∞—Å—Å–∞
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ WB_Congratulations_bot\n\n"
        "–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º –¥–ª—è –≤–∞—Å:\n\n"
        "–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º, –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, "
        "–∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É –∏ –≤—ã–¥–∞–Ω–Ω—ã–π –≤–∞–º –ø–∞—Ä–æ–ª—å. "
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'",
        reply_markup=reply_markup
    )
    return None

async def register_start(update, context):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞):",
        reply_markup=KeyboardManager.remove_keyboard()  # ‚Üê —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    )
    return LOGIN

CORPORATE_DOMAIN = "st.ithub.ru"  # ‚Üê –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω

async def get_login(update, context):
    user_login = update.message.text.strip()

    if not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", user_login):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: ivanov@st.ithub.ru"
        )
        return LOGIN

    if not user_login.endswith(f"@{CORPORATE_DOMAIN}"):
        await update.message.reply_text(
            f"–ü–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π (@{CORPORATE_DOMAIN}).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return LOGIN

    context.user_data['login'] = user_login
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def get_password(update, context):
    user_password = update.message.text.strip()
    context.user_data['password'] = user_password
    employees = get_all_employees()
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!\n"
        "–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å:",
        reply_markup=KeyboardManager.get_employee_inline_keyboard(employees)
    )
    return ConversationHandler.END

async def show_employees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    employees = get_all_employees()
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å:",
            reply_markup=KeyboardManager.get_employee_inline_keyboard(employees)
        )
    else:
        await update.message.reply_text(
            text="–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å:",
            reply_markup=KeyboardManager.get_employee_inline_keyboard(employees)
        )

async def back_to_employees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await show_employees(update, context)

async def employee_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_name = query.data.replace("select_", "")

    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: *{selected_name}*\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=KeyboardManager.get_style_inline_keyboard(selected_name)
    )

async def cancel(update, context):
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def style_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    parts = query.data.split("_", 2)
    if len(parts) < 3:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è.")
        return

    style_type = parts[1]
    employee_name = parts[2]

    context.user_data['current_employee'] = employee_name
    context.user_data['current_style'] = style_type

    if style_type == "official":
        message = (
            f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {employee_name}!\n\n"
            "–û—Ç –∏–º–µ–Ω–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞ –ø—Ä–∏–º–∏—Ç–µ –Ω–∞—à–∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
            "–ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ø–µ—Ö–æ–≤ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è!"
        )
    elif style_type == "business":
        message = (
            f"{employee_name},\n\n"
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!\n"
            "–í–∞—à –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏—Ç—Å—è. "
            "–£—Å–ø–µ—Ö–æ–≤ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!"
        )
    elif style_type == "friendly":
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {employee_name}! üéâ\n\n"
            "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞, "
            "–∫—Ä—É—Ç—ã—Ö –∏–¥–µ–π –∏ —á—Ç–æ–±—ã –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–ª–∏—Å—å —Å–∞–º–∏! üòé"
        )
    else:
        message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å."

    context.user_data['current_message'] = message

    await query.edit_message_text(
        text=message,
        reply_markup=KeyboardManager.get_feedback_inline_keyboard(employee_name)
    )

async def feedback_like(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!")

async def feedback_rewrite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    employee_name = query.data.split("_", 2)[2]

    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: *{employee_name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=KeyboardManager.get_style_inline_keyboard(employee_name)
    )

async def feedback_edit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    employee_name = query.data.split("_", 2)[2]

    context.user_data['awaiting_edit'] = True
    context.user_data['current_employee'] = employee_name

    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≤–µ—Ä—Å–∏—é –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

async def handle_edit_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_edit'):
        edited_text = update.message.text.strip()
        employee_name = context.user_data.get('current_employee', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫')

        context.user_data['awaiting_edit'] = False

        await update.message.reply_text(
            f"–í–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {employee_name}:\n\n{edited_text}\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∞–≤–∫–∏!"
        )
        return

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text([KeyboardManager.REGISTER]), register_start)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_login)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(employee_selected, pattern=r"^select_"))
    app.add_handler(CallbackQueryHandler(style_selected, pattern=r"^style_"))
    app.add_handler(CallbackQueryHandler(back_to_employees, pattern=r"^back_to_employees"))
    app.add_handler(CallbackQueryHandler(feedback_like, pattern=r"^feedback_like_"))
    app.add_handler(CallbackQueryHandler(feedback_rewrite, pattern=r"^feedback_rewrite_"))
    app.add_handler(CallbackQueryHandler(feedback_edit_start, pattern=r"^feedback_edit_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_text))


    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()